// ui widgets

// a widget does one thing well. it's usually an interaction piece. it can read and set data, 
// fire functions, or maybe even send events. widgets can contain widgets (?*)
// a widget should be skinnable. its html skeleton is marked up with attributes

/* widget!:*
	does one thing well - ?*: set a toggle, or push a button, or flip a grid column (?*)
	- can read and set data () in an external model AND in the dom
	- can fire functions
	- could send events?

	? * html skeleton -> data attrs
	js -> prototypal methods 
		- initializers functions, configurable with objects * 
									- think skinning, 
									  setting models or feeding urls

ui widget styles here should be structural vs presentational
or - > * 
	layout structure, as necessary -> data attrs styles, as below
	- presentation? skinns? -> css classes

	- lock into sass? no -> css classes
		ex: ghost-drawer?
*/

@import "ui_kit.styl";

// ghost color scheme
ghostLightGray = rgba(250, 250, 250, 0.4)
ghostMedDarkGray = rgba(10, 10, 10, 0.55)
ghostMedGray = rgba(10, 10, 10, 0.7)
ghostWhite = rgba(255, 255, 255, 0.75)
ghostWhiteBright = rgba(255, 255, 255, 1.0)

ghostRad = 4px

textHilight = 0 1px 0 rgba(255, 255, 255, 0.4)
textShadow = 0 -1px 0 rgba(0, 0, 0, 0.4)

drawerWidth = 250px

HelveticaLight()
	font-family: "HelveticaNeue-Light"
	font-weight: lighter !important

HelveticaUltraLight()
	font-family: "HelveticaNeue-UltraLight"
	font-weight: lighter !important

ghostBtn()
	border: 0
	borderRads( ghostRad )
	background: ghostLightGray
	font-size: 18px
	padding: 5px 8px
	transition( all .3s ease-in-out)
	&:hover
		background: ghostWhite
		//border-color: ghostLightGray
	&[data-ui-state="active"]
		background: ghostWhite
		border-color: ghostLightGray
		&:hover
			background: ghostWhiteBright

ghostDrawer()
	background: ghostMedGray
	border-right: 5px solid rgba(255, 255, 255, 0.1)
	width: (drawerWidth)

// the frame contains a ui layer. in our case, it's above our content,
// which is the svg render
[data-ui="frame"]
	position: absolute
	height: 100%
	width: 100%
	z-index: 2

// ui widgets
[data-ui="drawer"]
	boxShadow( inset -10px 0 20px rgba(0, 0, 0, 0.6))
	ghostDrawer()
	height: 100%
	float: left
	[data-ui="subheading"]
		HelveticaUltraLight()
	&#left
		margin-left: -(drawerWidth)
		transition(margin-left .3s ease-in-out)
		&.anim-toggled
			margin-left: 0
	&#right
		margin-right: -(drawerWidth)


// collapsible accordion-style widget
[data-ui="collapsible"]
	> [data-ui="heading"]
		HelveticaUltraLight()
		boxShadow(0 5px 15px rgba(0, 0, 0, 0.7))
		background: rgba(150, 150, 150, 0.1)
		text-shadow: textShadow
		padding: 15px
		font-size: 24px
		letter-spacing: 1px
	[data-ui="subheading"]
		//HelveticaLight
		HelveticaUltraLight()
		background: rgba(50, 50, 50, 0.1)
		color: #ccc
		text-shadow: textShadow
		padding: 5px 15px
		margin: 20px 0
		text-align: left
	> [data-ui="content"]
		> div[class*="btn-"]
			margin-left: 20px
	
// buttons / toggles 
[data-ui="toggle"]
	HelveticaLight()
	&[data-ui-state="active"]
		background: ghostLightGray

// multi-toggle
[data-ui="multi-toggle"]
	[data-ui-btn]
		borderRads(0)
		display: inline-block
		margin: auto -1px
		&:first-child
			borderRadsSpecify(ghostRad, 0, 0, ghostRad)
		&:last-child
			borderRadsSpecify(0, ghostRad, ghostRad, 0)

// toggle group
[data-ui="toggle-group"]
	display: inline-block
	[data-ui-btn]
		borderRads(0)
		display: block
		width: 100%
		&:first-child
			borderRadsSpecify(ghostRad, ghostRad, 0, 0)
		&:last-child
			borderRadsSpecify(0, 0, ghostRad, ghostRad)
	
[data-ui-btn]
	ghostBtn()
















